{
  "docker-compose.yml": "version: '3.8'\n\nservices:\n  # MongoDB Database\n  mongodb:\n    image: mongo:6.0\n    container_name: scheduling-mongodb\n    restart: unless-stopped\n    ports:\n      - \"27017:27017\"\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: admin\n      MONGO_INITDB_ROOT_PASSWORD: password123\n      MONGO_INITDB_DATABASE: scheduling\n    volumes:\n      - mongodb_data:/data/db\n      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro\n    networks:\n      - scheduling-network\n    healthcheck:\n      test: echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  # Backend API\n  backend:\n    build: \n      context: ./backend\n      dockerfile: Dockerfile\n    container_name: scheduling-backend\n    restart: unless-stopped\n    ports:\n      - \"5000:5000\"\n    environment:\n      NODE_ENV: production\n      MONGODB_URI: mongodb://admin:password123@mongodb:27017/scheduling?authSource=admin\n      JWT_SECRET: your-super-secret-jwt-key-change-in-production\n      JWT_EXPIRE: 7d\n      FRONTEND_URL: http://localhost:3000\n      PORT: 5000\n    depends_on:\n      mongodb:\n        condition: service_healthy\n    networks:\n      - scheduling-network\n    volumes:\n      - backend_uploads:/app/uploads\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:5000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  # Frontend Application\n  frontend:\n    build:\n      context: ./frontend\n      dockerfile: Dockerfile\n    container_name: scheduling-frontend\n    restart: unless-stopped\n    ports:\n      - \"3000:3000\"\n    environment:\n      NEXT_PUBLIC_API_URL: http://localhost:5000\n      NEXT_PUBLIC_APP_NAME: سیستم برنامه‌ریزی دروس\n    depends_on:\n      backend:\n        condition: service_healthy\n    networks:\n      - scheduling-network\n\n  # Redis Cache (Optional)\n  redis:\n    image: redis:7-alpine\n    container_name: scheduling-redis\n    restart: unless-stopped\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n    networks:\n      - scheduling-network\n    command: redis-server --appendonly yes --requirepass redis_password\n\nvolumes:\n  mongodb_data:\n    driver: local\n  backend_uploads:\n    driver: local\n  redis_data:\n    driver: local\n\nnetworks:\n  scheduling-network:\n    driver: bridge\n    ipam:\n      config:\n        - subnet: 172.20.0.0/16",
  "frontend/Dockerfile": "# Multi-stage build for production\nFROM node:18-alpine AS base\n\n# Install dependencies only when needed\nFROM base AS deps\nRUN apk add --no-cache libc6-compat\nWORKDIR /app\n\n# Copy package files\nCOPY package.json package-lock.json* ./\nRUN npm ci --only=production && npm cache clean --force\n\n# Rebuild the source code only when needed\nFROM base AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\n\n# Build the application\nRUN npm run build\n\n# Production image, copy all the files and run next\nFROM base AS runner\nWORKDIR /app\n\nENV NODE_ENV production\n\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nextjs\n\n# Copy built application\nCOPY --from=builder /app/public ./public\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static\n\nUSER nextjs\n\nEXPOSE 3000\n\nENV PORT 3000\nENV HOSTNAME \"0.0.0.0\"\n\nCMD [\"node\", \"server.js\"]",
  "backend/Dockerfile": "# Multi-stage build for production\nFROM node:18-alpine AS base\n\n# Install dependencies only when needed\nFROM base AS deps\nRUN apk add --no-cache libc6-compat python3 make g++\nWORKDIR /app\n\n# Copy package files\nCOPY package.json package-lock.json* ./\nRUN npm ci --only=production && npm cache clean --force\n\n# Build the source code\nFROM base AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\n\n# Build TypeScript\nRUN npm run build\n\n# Production image\nFROM base AS runner\nWORKDIR /app\n\nENV NODE_ENV production\n\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nodejs\n\n# Copy built application\nCOPY --from=builder --chown=nodejs:nodejs /app/dist ./dist\nCOPY --from=builder --chown=nodejs:nodejs /app/node_modules ./node_modules\nCOPY --from=builder --chown=nodejs:nodejs /app/package.json ./package.json\n\n# Create uploads directory\nRUN mkdir -p /app/uploads && chown nodejs:nodejs /app/uploads\n\nUSER nodejs\n\nEXPOSE 5000\n\nHEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \\\n  CMD curl -f http://localhost:5000/health || exit 1\n\nCMD [\"node\", \"dist/server.js\"]",
  "backend/.env.example": "# Server Configuration\nNODE_ENV=development\nPORT=5000\n\n# Database\nMONGODB_URI=mongodb://localhost:27017/university-scheduling\nMONGODB_TEST_URI=mongodb://localhost:27017/university-scheduling-test\n\n# JWT\nJWT_SECRET=your-super-secret-jwt-key-change-in-production\nJWT_EXPIRE=7d\n\n# CORS\nFRONTEND_URL=http://localhost:3000\n\n# Email Configuration (Optional)\nSMTP_HOST=smtp.gmail.com\nSMTP_PORT=587\nSMTP_USER=your-email@gmail.com\nSMTP_PASS=your-app-password\nFROM_EMAIL=noreply@university-scheduling.com\nFROM_NAME=University Scheduling System\n\n# File Upload\nUPLOAD_PATH=./uploads\nMAX_FILE_SIZE=5242880\nALLOWED_FILE_TYPES=.jpg,.jpeg,.png,.pdf,.doc,.docx,.xls,.xlsx\n\n# Redis (Optional)\nREDIS_URL=redis://localhost:6379\nREDIS_PASSWORD=redis_password\n\n# External APIs\nPERSIAN_CALENDAR_API=https://api.persian-calendar.com\n\n# Logging\nLOG_LEVEL=info\nLOG_FILE=logs/app.log\n\n# Rate Limiting\nRATE_LIMIT_WINDOW_MS=900000\nRATE_LIMIT_MAX_REQUESTS=100\n\n# Security\nBCRYPT_ROUNDS=12\nSESSION_SECRET=your-session-secret",
  "frontend/.env.local.example": "# API Configuration\nNEXT_PUBLIC_API_URL=http://localhost:5000\nNEXT_PUBLIC_APP_NAME=سیستم برنامه‌ریزی دروس دانشگاهی\n\n# Features\nNEXT_PUBLIC_ENABLE_ANALYTICS=false\nNEXT_PUBLIC_ENABLE_PWA=true\n\n# External Services\nNEXT_PUBLIC_GOOGLE_ANALYTICS_ID=\nNEXT_PUBLIC_SENTRY_DSN=\n\n# Development\nNEXT_PUBLIC_DEBUG=false",
  "shared/package.json": "{\n  \"name\": \"@university-scheduling/shared\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Shared types and utilities for University Scheduling System\",\n  \"main\": \"dist/index.js\",\n  \"types\": \"dist/index.d.ts\",\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"dev\": \"tsc --watch\",\n    \"clean\": \"rm -rf dist\"\n  },\n  \"dependencies\": {\n    \"typescript\": \"^5.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20.4.0\"\n  }\n}",
  "scripts/setup.sh": "#!/bin/bash\n\n# University Course Scheduling System Setup Script\necho \"🚀 Setting up University Course Scheduling System...\"\n\n# Check if Node.js is installed\nif ! command -v node &> /dev/null; then\n    echo \"❌ Node.js is not installed. Please install Node.js 18+ first.\"\n    exit 1\nfi\n\n# Check if Docker is installed\nif ! command -v docker &> /dev/null; then\n    echo \"⚠️  Docker is not installed. Docker setup will be skipped.\"\n    DOCKER_AVAILABLE=false\nelse\n    DOCKER_AVAILABLE=true\nfi\n\n# Install root dependencies\necho \"📦 Installing root dependencies...\"\nnpm install\n\n# Install frontend dependencies\necho \"📦 Installing frontend dependencies...\"\ncd frontend\nnpm install\ncd ..\n\n# Install backend dependencies\necho \"📦 Installing backend dependencies...\"\ncd backend\nnpm install\ncd ..\n\n# Install shared dependencies\necho \"📦 Installing shared dependencies...\"\ncd shared\nnpm install\nnpm run build\ncd ..\n\n# Create environment files\necho \"⚙️  Setting up environment files...\"\n\nif [ ! -f backend/.env ]; then\n    cp backend/.env.example backend/.env\n    echo \"✅ Created backend/.env (please update with your values)\"\nfi\n\nif [ ! -f frontend/.env.local ]; then\n    cp frontend/.env.local.example frontend/.env.local\n    echo \"✅ Created frontend/.env.local (please update with your values)\"\nfi\n\n# Create necessary directories\necho \"📁 Creating directories...\"\nmkdir -p backend/uploads\nmkdir -p backend/logs\nmkdir -p frontend/public/fonts\n\n# Set permissions\nchmod +x scripts/*.sh\n\necho \"🎉 Setup completed successfully!\"\necho \"\"\necho \"📋 Next steps:\"\necho \"1. Update environment files with your configuration\"\necho \"2. Start MongoDB (or use Docker)\"\necho \"3. Run 'npm run dev' to start development servers\"\necho \"\"\necho \"🐳 For Docker setup:\"\necho \"1. Run 'docker-compose up -d' to start all services\"\necho \"\"\necho \"📖 For more information, see README.md\"\n",
  "scripts/deploy.sh": "#!/bin/bash\n\n# Production Deployment Script\necho \"🚀 Deploying University Course Scheduling System...\"\n\n# Build applications\necho \"🔨 Building applications...\"\nnpm run build\n\n# Run tests\necho \"🧪 Running tests...\"\nnpm run test\n\nif [ $? -ne 0 ]; then\n    echo \"❌ Tests failed. Deployment aborted.\"\n    exit 1\nfi\n\n# Docker deployment\nif [ \"$1\" = \"docker\" ]; then\n    echo \"🐳 Deploying with Docker...\"\n    docker-compose -f docker-compose.prod.yml down\n    docker-compose -f docker-compose.prod.yml build\n    docker-compose -f docker-compose.prod.yml up -d\n    echo \"✅ Docker deployment completed\"\nelse\n    echo \"📦 Manual deployment...\"\n    echo \"Please follow your hosting provider's instructions\"\nfi\n\necho \"🎉 Deployment script completed!\"\n"
}